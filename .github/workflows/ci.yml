name: CI/CD Pipeline

on:
  push:
    branches: [ main, master ]
  pull_request:
    branches: [ main, master ]

jobs:
  build-and-test:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      # Backend build and test
      - name: Set up JDK 21
        uses: actions/setup-java@v3
        with:
          distribution: 'temurin'
          java-version: '21'
          cache: gradle

      - name: Build and test backend
        working-directory: ./backend
        run: |
          chmod +x ./gradlew
          ./gradlew build

      # Frontend build
      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '20'
          cache: 'npm'
          cache-dependency-path: './frontend/package-lock.json'

      - name: Build and test frontend
        working-directory: ./frontend
        run: |
          npm ci
          npm run build

  build-and-push-images:
    needs: build-and-test
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Build and export backend Docker image
        uses: docker/build-push-action@v4
        with:
          context: ./backend
          file: ./backend/Dockerfile
          load: true
          tags: todo-app-backend:latest

      - name: Build and export frontend Docker image
        uses: docker/build-push-action@v4
        with:
          context: ./frontend
          file: ./frontend/Dockerfile
          load: true
          tags: todo-app-frontend:latest

      - name: Save Docker images
        run: |
          docker save todo-app-backend:latest | gzip > backend-image.tar.gz
          docker save todo-app-frontend:latest | gzip > frontend-image.tar.gz

      - name: Upload backend image as artifact
        uses: actions/upload-artifact@v4
        with:
          name: backend-image
          path: backend-image.tar.gz

      - name: Upload frontend image as artifact
        uses: actions/upload-artifact@v4
        with:
          name: frontend-image
          path: frontend-image.tar.gz

  deploy:
    needs: build-and-push-images
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Download backend image
        uses: actions/download-artifact@v4
        with:
          name: backend-image
          path: ./

      - name: Download frontend image
        uses: actions/download-artifact@v4
        with:
          name: frontend-image
          path: ./

      - name: Install sshpass
        run: sudo apt-get install -y sshpass

      - name: Transfer Docker Compose file
        run: |
          export SSHPASS=${{ secrets.SSH_PASSWORD }}
          sshpass -e scp -P ${{ secrets.SSH_PORT }} -o StrictHostKeyChecking=no docker-compose.yml ${{ secrets.SSH_USERNAME }}@${{ secrets.SSH_HOST }}:~/

      - name: Ensure Docker is installed on remote VM
        run: |
          export SSHPASS=${{ secrets.SSH_PASSWORD }}
          sshpass -e ssh -p ${{ secrets.SSH_PORT }} -o StrictHostKeyChecking=no ${{ secrets.SSH_USERNAME }}@${{ secrets.SSH_HOST }} << 'EOF'
            # Check if Docker is installed
            if ! command -v docker &> /dev/null; then
              echo "Docker not found, installing..."
              # Update package index
              sudo apt-get update
              # Install prerequisites
              sudo apt-get install -y apt-transport-https ca-certificates curl software-properties-common
              # Add Docker's official GPG key
              curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo apt-key add -
              # Add Docker repository
              sudo add-apt-repository "deb [arch=amd64] https://download.docker.com/linux/ubuntu $(lsb_release -cs) stable"
              # Update package index again
              sudo apt-get update
              # Install Docker CE
              sudo apt-get install -y docker-ce docker-ce-cli containerd.io
              # Add current user to docker group
              sudo usermod -aG docker $USER
            else
              echo "Docker is already installed"
            fi

            # Check if Docker Compose is installed
            if ! command -v docker-compose &> /dev/null; then
              echo "Docker Compose not found, installing..."
              # Install Docker Compose
              sudo curl -L "https://github.com/docker/compose/releases/download/v2.20.3/docker-compose-$(uname -s)-$(uname -m)" -o /usr/local/bin/docker-compose
              sudo chmod +x /usr/local/bin/docker-compose
            else
              echo "Docker Compose is already installed"
            fi
          EOF

      - name: Transfer Docker images and deploy
        run: |
          export SSHPASS=${{ secrets.SSH_PASSWORD }}
          sshpass -e scp -P ${{ secrets.SSH_PORT }} -o StrictHostKeyChecking=no backend-image.tar.gz frontend-image.tar.gz ${{ secrets.SSH_USERNAME }}@${{ secrets.SSH_HOST }}:~/
          sshpass -e ssh -p ${{ secrets.SSH_PORT }} -o StrictHostKeyChecking=no ${{ secrets.SSH_USERNAME }}@${{ secrets.SSH_HOST }} << 'EOF'
            # Load Docker images
            docker load < backend-image.tar.gz
            docker load < frontend-image.tar.gz

            # Stop and remove existing containers
            docker-compose down || true

            # Start containers with new images
            docker-compose up -d

            # Clean up
            rm backend-image.tar.gz frontend-image.tar.gz
          EOF
